<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on ticks blog</title>
    <link>https://tickscn.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on ticks blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 04 Jan 2020 19:49:00 +0800</lastBuildDate><atom:link href="https://tickscn.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第四章编程项目</title>
      <link>https://tickscn.github.io/post/osc_chapter4_project/</link>
      <pubDate>Sat, 04 Jan 2020 19:49:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/osc_chapter4_project/</guid>
      <description>项目 1: 数独解决方案验证器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58</description>
    </item>
    
    <item>
      <title>多线程问题习题</title>
      <link>https://tickscn.github.io/post/osc_chapter4_answer/</link>
      <pubDate>Wed, 25 Dec 2019 15:47:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/osc_chapter4_answer/</guid>
      <description>4.15 创建多线程程序验证 3.13 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59</description>
    </item>
    
    <item>
      <title>多线程问题</title>
      <link>https://tickscn.github.io/post/multhread-issues/</link>
      <pubDate>Mon, 09 Dec 2019 20:45:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/multhread-issues/</guid>
      <description>fork() and exec() 某个线程调用 fork(), 新进程复制所有线程还是单一线程? 有的 UNIX 系统有两种形式的 fork() exec() 指定的程序会取代所有线程 信号处理 UNIX 信号(signal) 用于通知</description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://tickscn.github.io/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Wed, 04 Dec 2019 14:43:49 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>线程是CPU使用的基本单元 线程ID 程序计数器 寄存器组 堆栈 与进程不同的是线程共用数据和代码 多线程的优点 响应性: 部分阻塞时仍能运行 资源共享: 与进</description>
    </item>
    
    <item>
      <title>simple_unix_shell</title>
      <link>https://tickscn.github.io/post/simple-unix-shell/</link>
      <pubDate>Wed, 27 Nov 2019 16:18:40 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/simple-unix-shell/</guid>
      <description>UNIX Shell 提供命令提示符. 如 ticks&amp;gt; 1 ticks&amp;gt; cat a.txt 读取命令, 创建子进程 命令最后加 &amp;ldquo;&amp;amp;&amp;rdquo; 符号, shell 与 子程序并发执行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description>
    </item>
    
    <item>
      <title>OSC3 习题</title>
      <link>https://tickscn.github.io/post/osc3-%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Tue, 26 Nov 2019 15:19:39 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/osc3-%E4%B9%A0%E9%A2%98/</guid>
      <description>习题 以下程序创建了多少进程 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unistd.h&amp;gt; int main() { int i; for (i = 0; i &amp;lt; 4; i++) fork(); return 0; } $2^4 = 16$ 假设父进程pid 2600, 子进程pid 2603, 下程序输出 1</description>
    </item>
    
    <item>
      <title>client/server communication</title>
      <link>https://tickscn.github.io/post/client-server-communication/</link>
      <pubDate>Mon, 25 Nov 2019 15:57:28 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/client-server-communication/</guid>
      <description>客户机/服务器通信 套接字(socket) 套接字为通信的端点. 网络通信的进程需要一对套接字, 即一个进程各有一个 套接字由一个IP地址和一个端口号</description>
    </item>
    
    <item>
      <title>IPC例子</title>
      <link>https://tickscn.github.io/post/ipc%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Sat, 23 Nov 2019 17:57:08 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/ipc%E4%BE%8B%E5%AD%90/</guid>
      <description>POSIX 共享内存 系统调用shm_open 1 2 3 4 5 6 7 8 9 10 11 12 13 14 NAME shm_open, shm_unlink - create/open or unlink POSIX shared memory ob‐ jects SYNOPSIS #include &amp;lt;sys/mman.h&amp;gt; #include &amp;lt;sys/stat.h&amp;gt; /* For mode constants */ #include &amp;lt;fcntl.h&amp;gt; /* For O_* constants */ int shm_open(const char *name, int oflag, mode_t mode);</description>
    </item>
    
    <item>
      <title>process</title>
      <link>https://tickscn.github.io/post/process/</link>
      <pubDate>Wed, 20 Nov 2019 16:36:38 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/process/</guid>
      <description>进程(process) 文本段(test section)或叫代码段(code section) 程序计数器(program counter) 栈(stack) 堆(heap) 进程状</description>
    </item>
    
    <item>
      <title>Linux 内核模块</title>
      <link>https://tickscn.github.io/post/linux-%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 19 Nov 2019 16:47:29 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/linux-%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/</guid>
      <description>操作系统概念第二章编程项目&amp;ndash;Linux 内核模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include &amp;lt;linux/init.h&amp;gt;#include &amp;lt;linux/module.h&amp;gt;#include &amp;lt;linux/kernel.h&amp;gt; /* This function is called when the module is loaded. */ int</description>
    </item>
    
    <item>
      <title>操作系统的实现</title>
      <link>https://tickscn.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 18 Nov 2019 16:34:04 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      <description>设计与实现 设计目标分为两个基本大类 用户目标(user goal) 系统目标(system goal) 机制与策略 策略(policy) 做什么 机制(mechanism)</description>
    </item>
    
    <item>
      <title>系统调用</title>
      <link>https://tickscn.github.io/post/systemcall/</link>
      <pubDate>Sun, 17 Nov 2019 18:40:06 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/systemcall/</guid>
      <description>系统调用(system call) 提供操作系统服务接口。应用程序开发人员根据应用编程接口(Application Programming Interface, API) 来设计程序。有三组常用API Windows API</description>
    </item>
    
    <item>
      <title>OSC1 导论</title>
      <link>https://tickscn.github.io/post/osc1/</link>
      <pubDate>Sat, 16 Nov 2019 15:51:51 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/osc1/</guid>
      <description>简介 操作系统的功能 计算机系统 硬件 中央处理器(Central Processing Unit, CPU) 内存(Memory) 输入/输出设备(Input/Output device, I/O device 软件 数据 可</description>
    </item>
    
  </channel>
</rss>
