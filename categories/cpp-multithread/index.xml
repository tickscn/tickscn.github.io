<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPP-Multithread on ticks blog</title>
    <link>https://tickscn.github.io/categories/cpp-multithread/</link>
    <description>Recent content in CPP-Multithread on ticks blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 17 Aug 2020 17:09:00 +0800</lastBuildDate><atom:link href="https://tickscn.github.io/categories/cpp-multithread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程同步</title>
      <link>https://tickscn.github.io/post/linux_cpp_sync/</link>
      <pubDate>Mon, 17 Aug 2020 17:09:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/linux_cpp_sync/</guid>
      <description>并发编程有两种基本模型 消息传递(message passing) 共享内存(shared memory) 分布式系统中, 只有消息传递模型是实用的. 线程同步四项原则 尽量低限度的</description>
    </item>
    
    <item>
      <title>线程安全的对象生命期管理</title>
      <link>https://tickscn.github.io/post/linux_cpp_multithread/</link>
      <pubDate>Sun, 16 Aug 2020 16:39:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/linux_cpp_multithread/</guid>
      <description>多线程与析构函数 当一个对象可以被多个线程访问, 如何确认何时销毁对象, 常见的竞态条件有 在即将析构一个对象时, 如何确认是否有其它线程正在使用该对</description>
    </item>
    
  </channel>
</rss>
