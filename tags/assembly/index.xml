<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assembly on ticks blog</title>
    <link>https://tickscn.github.io/tags/assembly/</link>
    <description>Recent content in assembly on ticks blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 14 Dec 2019 20:04:00 +0800</lastBuildDate><atom:link href="https://tickscn.github.io/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>汇编基本运算</title>
      <link>https://tickscn.github.io/post/asm-num-arithmetic/</link>
      <pubDate>Sat, 14 Dec 2019 20:04:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/asm-num-arithmetic/</guid>
      <description>整型运算 加 (addition) add 指令 add 指令用来加两个整型 1 add source, destination source 可以是寄存器, 内存, 立即数 destination 可以是寄存器, 内存 但是 source 和 destination 不可以同时是内存 add 后面应该加上后缀来</description>
    </item>
    
    <item>
      <title>汇编数字</title>
      <link>https://tickscn.github.io/post/asm-number/</link>
      <pubDate>Mon, 09 Dec 2019 19:55:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/asm-number/</guid>
      <description>数字类型(numeric data type) 基本数字类型 无符号整型(unsigned integer) 有符号整型(signed integer) BCD 压缩 BCD 单精度浮点数 双精度浮点数 扩展精度浮点</description>
    </item>
    
    <item>
      <title>汇编控制执行顺序</title>
      <link>https://tickscn.github.io/post/asm-flow-control/</link>
      <pubDate>Sun, 08 Dec 2019 18:00:00 +0800</pubDate>
      
      <guid>https://tickscn.github.io/post/asm-flow-control/</guid>
      <description>程序不总是按顺序从头到尾执行, 有时需要分支或者循环. 指令指针(The Instruction Pointer) 指令指针决定下一个要执行的指令. 此时 EIP(x86_64 是 RIP)不断增加 不能在程序中</description>
    </item>
    
    <item>
      <title>stack</title>
      <link>https://tickscn.github.io/post/stack/</link>
      <pubDate>Wed, 04 Dec 2019 18:28:03 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/stack/</guid>
      <description>堆栈(The Stack) 堆栈的工作方式 堆栈是一段特殊的内存空间. 它特殊在数据的插入和删除数据的方式. 普通的数据段(data section)数据顺序存储</description>
    </item>
    
    <item>
      <title>move-data</title>
      <link>https://tickscn.github.io/post/move-data/</link>
      <pubDate>Sun, 01 Dec 2019 16:18:37 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/move-data/</guid>
      <description>数据定义 data section 数据段(data section)是最通常的定义数据的地方. 定义了数据内存中的存储位置, 可以在指令中引用, 修改 由 .data 伪指令声明. 该 section</description>
    </item>
    
    <item>
      <title>simple-assembly-program</title>
      <link>https://tickscn.github.io/post/simple-assembly-program/</link>
      <pubDate>Fri, 29 Nov 2019 19:43:09 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/simple-assembly-program/</guid>
      <description>一个汇编语言的模板 1 2 3 4 5 6 7 8 .section .data &amp;lt; initialized data &amp;gt; .section .bss &amp;lt; uninitialized data &amp;gt; .section .text .globl _start _start: &amp;lt; instruction code &amp;gt; 一个简单的汇编程序 CPUID 指令 根据EAX寄存器的值, CPUID 指令将信息存入 EBX,</description>
    </item>
    
    <item>
      <title>汇编学习工具</title>
      <link>https://tickscn.github.io/post/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 29 Nov 2019 18:49:18 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/</guid>
      <description>汇编器(assembler) MASM NASM GAS: 使用AT&amp;amp;T 语法 等 链接器(linker) 链接 objfile 生成可执行文件 调试器(debugger) GNU assembler gas 是 GNU b</description>
    </item>
    
    <item>
      <title>指令管理</title>
      <link>https://tickscn.github.io/post/%E6%8C%87%E4%BB%A4%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 28 Nov 2019 20:37:58 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/%E6%8C%87%E4%BB%A4%E7%AE%A1%E7%90%86/</guid>
      <description>CPU从内存读取指令(instruction)和数据(data). 为了区分指令和数腒, 分别使用指令指针(instruction pointer), 数据指针(d</description>
    </item>
    
    <item>
      <title>汇编基础</title>
      <link>https://tickscn.github.io/post/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 26 Nov 2019 18:42:59 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid>
      <description>语法元素 整数常量(Integers) Intel [{+ | -}] digits [radix] radix 进制 h 16 d 10(默认) q/o 8 b 二进制 r 编码实数 t 10(备用) y 2(备用) AT&amp;amp;T prefix 进制 0b/0B 2 0 8 0x/0X 16</description>
    </item>
    
    <item>
      <title>I/O系统</title>
      <link>https://tickscn.github.io/post/i-o%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 25 Nov 2019 19:24:57 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/i-o%E7%B3%BB%E7%BB%9F/</guid>
      <description>I/O 访问层次 高级语言函数: 可移值 操作系统: 使用API BIOS 例: 写入字符到显示器 程序调用库函数, 写入标准输出 库函数调用系统函数, 传入字符串指针 操作系</description>
    </item>
    
    <item>
      <title>计算机组件</title>
      <link>https://tickscn.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 25 Nov 2019 19:06:29 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E4%BB%B6/</guid>
      <description>主板(motherboard) 主板有不同的组件. 但是一般都有基础组件 CPU 插座 存储器插槽(SIMM 或 DIMM) BIOS CMOS RAM, 电池供电 大容量设备(硬盘, CD) 接口 外设</description>
    </item>
    
    <item>
      <title>64位 x86_64</title>
      <link>https://tickscn.github.io/post/64-bit-x86/</link>
      <pubDate>Sat, 23 Nov 2019 14:52:38 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/64-bit-x86/</guid>
      <description>x86_64 指令集是x86指令集的64位扩展 向后兼容x86指令集 地址长度为64位, 虚拟地址空间为 16EiB ($2^64$). 根据芯片实现, 只使用低48位(256TiB) 可以使</description>
    </item>
    
    <item>
      <title>32位 x86</title>
      <link>https://tickscn.github.io/post/32%E4%BD%8Dx86/</link>
      <pubDate>Fri, 22 Nov 2019 15:48:30 +0000</pubDate>
      
      <guid>https://tickscn.github.io/post/32%E4%BD%8Dx86/</guid>
      <description>操作模式 保护模式(Protected Mode): 原生状状, 所有的指令和特性都是可用的. 程序会被分配独立内存(段). 处理器禁止程序使用自身段外的内存 虚拟</description>
    </item>
    
  </channel>
</rss>
